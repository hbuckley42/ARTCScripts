<?xml version = "1.0" encoding = "UTF-8" ?>

<Script>
  <Version>1.0</Version>
  <Copyright>2019 Bentley Systems, Incorporated. All rights reserved.</Copyright>
  <Description>Imports ARTC TRV surveys into the OA system</Description>

  <Parameter>
    <Name>strSurveyToProcess</Name>
    <Source>survey</Source>
    <Type>string</Type>
    <Alias>Survey Name:</Alias>
    <Default>IMP-AK Track Geometry Run 32593 20190121</Default>
  </Parameter>

  <Parameter>
    <Name>datSurveyDate</Name>
    <Type>date</Type>
    <Alias>New Survey Date:</Alias>
    <Default>20/03/2019</Default>
  </Parameter>

  <Parameter>
    <Name>dblWeight</Name>
    <Type>double</Type>
    <Alias>General Weight:</Alias>
    <Default>0.08</Default>
  </Parameter>

  <Parameter>
    <Name>dblCurveWeight</Name>
    <Type>double</Type>
    <Alias>Curve Weight:</Alias>
    <Default>0.02</Default>
  </Parameter>

  <Parameter>
    <Name>intComputeSweptMeanWindow</Name>
    <Type>integer</Type>
    <Alias>Compute Swept Mean Window (samples): </Alias>
    <Default>5</Default>
  </Parameter>

  <Parameter>
    <Name>strRunID</Name>
    <Type>string</Type>
    <Alias>Run ID: </Alias>
    <Default>+01</Default>
  </Parameter>

  <Commands>

    <!-- 
    ##################################################################################################

    ################################################################################################## -->

    <!-- strSurveyToSave = string.Format ("IMP-AK Track Geometry Run XXXXX %tY%tm%td", strSurveyDate, strSurveyDate, strSurveyDate)-->
    strSurveyToSave = string.Format ("IMP-AK Track Geometry Run XXX%S", strRunID)
    strSurveyType = util.Assign ("AK Track Geometry")

    strCurveComponentCategory = util.Assign ("Curve Component")
    strChannelNameGauge   = util.Assign ("Gauge")
    strChannelNameTwist10 = util.Assign ("Twist10")
    strChannelNameTwist14 = util.Assign ("Twist14")
    strChannelNameTwist14Xtn = util.Assign ("Twist14Xtn")
    strChannelNameTwist2 = util.Assign ("Twist2")
    strChannelNameTopLeft = util.Assign ("Top Left")
    strChannelNameTopRight = util.Assign ("Top Right")
    strChannelNameSurfaceLeft20m = util.Assign ("Surface Left 20m")
    strChannelNameSurfaceRight20m = util.Assign ("Surface Right 20m")
    strChannelNameVersineLeft20m = util.Assign ("Versine Left 20m")
    strChannelNameVersineRight20m = util.Assign ("Versine Right 20m")
    strChannelNameSuperElevationFloat = util.Assign ("Super Elevation Float")

    strChannelNameAlignLelft20m = util.Assign ("Align Lelft 20m")
    strChannelNameAlignRight20m = util.Assign ("Align Right 20m")
    strChannelNameAlignLelft50m = util.Assign ("Align Lelft 50m")
    strChannelNameAlignRight50m = util.Assign ("Align Right 50m")

    uniMetre = unit.GetUnit ("Metric", "metre")

    srmTwist10 = stream.Load (strSurveyToProcess, strChannelNameTwist10)
    trvSurvey = stream.ToTraversals (srmTwist10)

    estWeight = event.CreateOnTraversalsBetweenMarkers (trvSurvey, 1)
    estWeight = event.SetAttribute (estWeight, "Side", dblWeight)

    estCurve = event.LoadByTraversal (strCurveComponentCategory, , , trvSurvey)
    estCurve = event.RetainAttribute (estCurve, "Side")

    forAbsSide = formula.Create ("abs('Side') * $dblCurveWeight")
    estCurve = event.CalculateAttribute (estCurve, forAbsSide, "Side", "double")
    estWeight = event.Aggregate (estWeight, estCurve, "Side", "Weight", "Sum")
    srmWeight = event.ToStream (estWeight, "Weight", 0.5, uniMetre)
    srmWeight = stream.ResampleToStream (srmWeight, srmTwist10, true)

    mapChannels = collection.MapCreate ()
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameGauge, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameTwist10, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameTwist14, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameTwist14Xtn, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameTwist2, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameTopLeft , srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameTopRight, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameSurfaceLeft20m , srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameSurfaceRight20m, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameVersineLeft20m , srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameVersineRight20m, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameSuperElevationFloat, srmWeight, mapChannels, intComputeSweptMeanWindow)

    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameAlignLelft20m, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameAlignRight20m, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameAlignLelft50m, srmWeight, mapChannels, intComputeSweptMeanWindow)
    script.Call("subF-CreateMockStream", strSurveyToProcess, strChannelNameAlignRight50m, srmWeight, mapChannels, intComputeSweptMeanWindow)


    survey.Delete (strSurveyToSave)
    survey.Save (strSurveyToSave, datSurveyDate, strSurveyType, mapChannels)

    <!-- Product Defect - survey dates are not set on save, below is a workaround-->
    survey.SetDate (strSurveyToSave, datSurveyDate)
    strProcParam = string.Format ("'%s'", strSurveyToSave)
    database.ExecuteProcedure("dbo.ORIP_REFRESH_CHANNEL_Q_TABLE", strProcParam, false)

  </Commands>


  <Function>
    <Name>subF-CreateMockStream</Name>

    <Description>

    </Description>

    <Parameter>
      <Name>strSurveyToProcess</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>strChannelName</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>srmWeight</Name>
      <Type>stream</Type>
    </Parameter>

    <Parameter>
      <Name>mapChannels</Name>
      <Type>map</Type>
    </Parameter>

    <Parameter>
      <Name>intComputeSweptMeanWindow</Name>
      <Type>integer</Type>
    </Parameter>

    <Commands>

      srmChannel = stream.Load (strSurveyToProcess, strChannelName)
      srmMockChannel = stream.ComputeSweptMean (srmChannel, intComputeSweptMeanWindow)
      srmMockChannel = stream.Math (srmMockChannel, "*", srmWeight)
      srmMockChannel = stream.Math (srmMockChannel, "+", srmChannel)

      collection.MapPut (mapChannels, strChannelName, srmMockChannel)


    </Commands>
  </Function>
</Script>
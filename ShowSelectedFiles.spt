<?xml version="1.1" encoding="ISO-8859-1"?>
<Script>
  <Description>Imports Survey</Description>
  <Version>1.1</Version>
  <Copyright>2019 Bentley Systems, Incorporated. All rights reserved.</Copyright>

  <Parameter required = "true">
    <Name>strUsername</Name>
    <Type>string</Type>
    <Source>user</Source>
    <Default>DataAdmin</Default>
    <Alias>User File Owner</Alias>
  </Parameter>

  <Parameter required = "true">
    <Name>strDataFile</Name>
    <Type>string</Type>
    <Alias>File Name:</Alias>
    <Source>userFile</Source>
    <Default>import-data/stream/.*</Default>
    <AssociatedParameter>strUsername</AssociatedParameter>
  </Parameter>

  <Parameter required = "true">
    <Name>strSuccessFolderName</Name>
    <Type>string</Type>
    <Alias>Success Folder Name:</Alias>
    <Source>userFolder</Source>
    <Default>processed-data/stream</Default>
    <AssociatedParameter>strUsername</AssociatedParameter>
  </Parameter>

  <Parameter required = "true">
    <Name>strFailedFolderName</Name>
    <Type>string</Type>
    <Alias>Failed Folder Name:</Alias>
    <Source>userFolder</Source>
    <Default>failed-data/stream</Default>
    <AssociatedParameter>strUsername</AssociatedParameter>
  </Parameter>

  <Commands>

    <!-- Check for name including wildcards, indicating no matching files found -->

    bolHasWildcards = script.Call ("BPS-F-CheckForWildcards.spf", strDataFile)
    control.GoToIf ("$bolHasWildcards", "End")

    <!-- Validate filename, filename: TrackCondition_<surveyType>_<runId>.csv, with optional path -->

    <!-- strFilename = string.ReplaceRegex (strDataFile, "^.*(\\\\|/)", "")                            -->
    <!-- strCheckFilename = string.ReplaceRegex (strFilename, "^TrackCondition_ICW_[0-9]+[.]csv$", "") -->
    <!-- test.FailIfNotEqual (strCheckFilename, "", "", "Filename is an invalid format")               -->


  </Commands>

</Script>
